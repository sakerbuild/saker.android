package saker.android.api.aapt2.link;

import java.util.Collection;
import java.util.List;
import java.util.NavigableMap;

import saker.build.file.path.SakerPath;
import saker.compiler.utils.api.CompilationIdentifier;
import saker.sdk.support.api.SDKDescription;

/**
 * Output of the aapt2 linking operation.
 */
public interface Aapt2LinkWorkerTaskOutput {
	/**
	 * Gets the compilation identifier associated with this operation.
	 * 
	 * @return The compilation identifier.
	 */
	public CompilationIdentifier getIdentifier();

	/**
	 * Gets the output APK path that is the result of the linking.
	 * 
	 * @return The absolute execution path.
	 */
	public SakerPath getAPKPath();

	/**
	 * Gets the path to the output Java source directories that contains generated sources.
	 * 
	 * @return One or more absolute execution paths.
	 */
	public List<SakerPath> getJavaSourceDirectories();

	/**
	 * Gets the path to the output proguard rules file.
	 * 
	 * @return The absolute execution path or <code>null</code> if none was generated.
	 */
	public SakerPath getProguardPath();

	/**
	 * Gets the path to the output proguard rules file for the main dex file.
	 * 
	 * @return The absolute execution path or <code>null</code> if none was generated.
	 */
	public SakerPath getProguardMainDexPath();

	//doc: for --emit-ids
	/**
	 * Gets the path to the output ID mappings file.
	 * <p>
	 * It is generated by using the <code>--emit-ids</code> option for aapt2.
	 * 
	 * @return The absolute execution path or <code>null</code> if none was generated.
	 */
	public SakerPath getIDMappingsPath();

	/**
	 * Gets the path to the output text symbols.
	 * 
	 * @return The absolute execution path.
	 */
	public SakerPath getTextSymbolsPath();

	/**
	 * Gets the mapping for split configuratio names to output APK paths.
	 * <p>
	 * The returned map contains keys that were specified as names in the task, and the values are the absolute output
	 * execution paths to the APKs genereated for that configuration.
	 * 
	 * @return The split output mapping.
	 */
	public NavigableMap<String, SakerPath> getSplitPaths();

	//these are passed as the input to aapt2
	/**
	 * Gets the input libraries used for linking.
	 * 
	 * @return The input link librariers.
	 */
	public Collection<Aapt2LinkInputLibrary> getInputLibraries();

	/**
	 * Gets the SDKs that were used as part of the operation.
	 * 
	 * @return The SDKs.
	 */
	public NavigableMap<String, ? extends SDKDescription> getSDKs();
}
