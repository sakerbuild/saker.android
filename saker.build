global(VERSION_saker.android) = "0.8.0"
global(DEPENDENCIES_saker.android) = [
	saker.sdk.support,
	saker.compiler.utils,
	saker.zip-api,
	saker.java.compiler-api,
	saker.maven.classpath-api,
	saker.maven.support,
]
global(saker.android.COMPILER_OPTIONS) = [
	{
		AddExports: [
			{
				Module: java.base,
				Package: sun.security.x509,
			}
		]
	}
]

static(VERSION_saker.build) = nest.dependency.resolve(
	saker.build,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]
static(VERSION_saker.nest) = nest.dependency.resolve(
	saker.nest,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]

compile(
	in testapicompile = include(_testapicompile),
	out javac,
) {
	$resolveddependencies = nest.dependency.resolve(
		global(DEPENDENCIES_saker.android),
		Filters: nest.dependency.filter.compile(CompileTransitive: false)
	)
	# the base classpath input for the package
	# the d8 API JAR from android build tools is added to the compilation 
	# when the task is called
	# the compilation is done with the API from version 28.x.y, to ensure compatibility
	$basecp = [
		saker.java.classpath.bundle([
			"saker.nest-api-v{ static(VERSION_saker.nest) }",
		]),
		saker.java.classpath.bundle($resolveddependencies),
		$testapicompile[javac],
	]
	
	$javac = saker.java.compile(
		SourceDirectories: [
			main/src/,
			api/src/,
			impl/src/,
		],
		ClassPath: $basecp + [
			lib/d8_api_29.jar,
			lib/apksigner_api_29.jar,
		],
		Identifier: "saker.android{ $testapicompile[enabled] ? "-testing" : "" }",
		CompilerOptions: global(saker.android.COMPILER_OPTIONS),
	)
	
	saker.java.compile(
		SourceDirectories: [
			main/src/,
			api/src/,
			impl/src/,
		],
		ClassPath: $basecp + [
			lib/d8_api_28.jar,
			lib/apksigner_api_29.jar,
		],
		Identifier: "saker.android-d8_28_compat",
		CompilerOptions: global(saker.android.COMPILER_OPTIONS),
	)
	foreach $ver in [24, 25, 26, 27, 28] {
		saker.java.compile(
			SourceDirectories: [
				main/src/,
				api/src/,
				impl/src/,
			],
			ClassPath: $basecp + [
				lib/d8_api_29.jar,
				"lib/apksigner_api_{ $ver }.jar",
			],
			Identifier: "saker.android-apksigner_{ $ver }_compat",
			CompilerOptions: global(saker.android.COMPILER_OPTIONS),
		)
	}
}
export(
	in compile = include(compile),
	out compile,
	out mainjar,
	out apijar,
	out impljar,
	out sourcejar,
	
	out bundlepaths = [
		$mainjar[Path],
		$apijar[Path],
		$impljar[Path],
		$sourcejar[Path],
	]
) {
	$mainjar = saker.jar.create(
		Output: saker.android.jar,
		Resources: [
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/android/main/**,
			},
			{
				Directory: main/resources/,
				Resources: **,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.android-v{ global(VERSION_saker.android) }",
				Nest-Bundle-Source: "saker.android-sources-v{ global(VERSION_saker.android) }",
			},
		},
	)
	$apijar = saker.jar.create(
		Output: saker.android-api.jar,
		Resources: [
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/android/api/**,
			},
			{
				Directory: api/resources/,
				Resources: **,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.android-api-v{ global(VERSION_saker.android) }",
				Nest-Bundle-Source: "saker.android-sources-v{ global(VERSION_saker.android) }",
			},
		},
	)
	$impljar = saker.jar.create(
		Output: saker.android-impl.jar,
		Resources: [
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/android/impl/**,
			},
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/android/d8support/**,
				TargetDirectory: d8support,
			},
			### Disabled, as jni based aapt2 invocation is not used
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: com/android/**,
				TargetDirectory: aapt2jnisupport,
			},
			###
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/android/apksignersupport/**,
				TargetDirectory: apksignersupport,
			},
			{
				Directory: impl/resources/,
				Resources: **,
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.android-impl-v{ global(VERSION_saker.android) }",
				Nest-Bundle-Source: "saker.android-sources-v{ global(VERSION_saker.android) }",
			},
		},
	)
	$sourcejar = saker.jar.create(
		Output: saker.android-sources.jar,
		Resources: [
			{
				Directory: [main/src/, api/src/, impl/src/],
				Resources: [**/*.java],
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.android-sources-v{ global(VERSION_saker.android) }",
			},
		},
	)
}
install() {
	$export = include(export)
	nest.local.install($export[bundlepaths])
}

test() {
	$testapi = include(_testapicompile, enabled: true)
	$export = include(export, compile: include(compile, testapicompile: $testapi))
	
	$testcompile = saker.java.compile(
		SourceDirectories: [
			test/src/,
		],
		ClassPath: [
			$testapi[javac],
			saker.java.classpath.bundle([
				"saker.build-test-runner-v{ static(VERSION_saker.build) }",
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
				"saker.nest-test-utils-v{ static(VERSION_saker.nest )}"
			]),
		],
		Identifier: saker.android-tests,
	)
	
	$test = saker.java.test(
		TestRunnerClassPath: [
			saker.java.classpath.bundle("saker.build-test-runner-v{ static(VERSION_saker.build) }"),
		],
		ClassPath: [
			$testapi[javac], 
		],
		DependencyClassPath: [
			$export[compile][javac],
		],
		TestInvokerClass: testing.saker.SakerJavaTestingInvoker,
		TestClassPath:	[
			$testcompile[ClassDirectory],
			saker.java.classpath.bundle([
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
				"saker.nest-test-utils-v{ static(VERSION_saker.nest )}",
			]),
		],
		TestClasses: [
			**.*Test
		],
		NonDeterministicTests: [
			**,
		],
		TestClassParameters: {
			**: {
				RepositoryJarPath: nest.bundle.localize("saker.nest-test-v{ static(VERSION_saker.nest) }")[BundleLocalPaths][0],
				RepositoryParameterBundles: "{ 
						foreach $path in $export[bundlepaths]: "{ std.file.mirror($path) };" 
					}",
				AndroidSDKLocationEnvironmentUserParameter: std.param.env(saker.android.sdk.install.location, Default: null),
			}
		},
		TestInvokerParameters: {
			SakerJarPath: std.file.mirror($testapi[instrumentedjar]),
			TimeoutMillis: 240000,
			TestsBaseBuildDirectory: std.file.mirror.path(std.file.place(test/build)),
		},
		IgnoreFileChanges: [
			std.file.place(test/build),
		] + $export[bundlepaths],
		#ProcessJVMParameters: [ "-agentlib:jdwp=transport=dt_socket,address=localhost:5432,server=y,suspend=y,quiet=y" ],
		MaxJVMCount: 1,
		FailFast: true,
		AbortOnFail: true,
		Verbose: true,
	)
}

_testapicompile(
	in enabled = false,
	out enabled,
	out javac,
	out instrumentedjar,
){
	if $enabled {
		$instrumentedjar = nest.test.instrument(
			nest.bundle.download("saker.build-test-v{ static(VERSION_saker.build) }")[BundlePaths][0],
			NestVersion: static(VERSION_saker.nest),
		)
		$sakerbuildcp = $instrumentedjar
	} else {
		$instrumentedjar = null
		$sakerbuildcp = saker.java.classpath.bundle("saker.build-api-v{ static(VERSION_saker.build) }")
	}
	$javac = saker.java.compile(
		SourceDirectories: [
			test/testapi/common/,
			$enabled ? test/testapi/enabled/ : test/testapi/disabled/,
		],
		ClassPath: [
			$sakerbuildcp,
		],
		Identifier: "testapi-{ $enabled ? enabled : disabled }",
	)
}